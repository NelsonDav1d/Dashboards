# ## Introduction
# 
# This Jupyter Notebook generates synthetic advertising data and stores it in a CSV file. 
# The data simulates a marketing campaign scenario with randomly generated data.
# 
# ## Step 1: Import Necessary Libraries
# 
# * csv for reading and writing CSV files.
# * datetime and timedelta for handling dates and times.
# * random for generating random numbers.
# 

# In[1]:


import csv
import random
from datetime import datetime, timedelta


# ## Step 2: Define File Path, Column Names, and Constants



file_path = r"c:\TestData\DataAdvertising\DataTest.csv"

columns = [
    "Date", "Campaign Name", "Total Unique Users", "Total Visitors Completed",
    "Impressions", "Number of Clicks", "Number of Conversions",
    "Advertising Channel", "Device Type", "OS", "Browser",
    "Geographic Location", "Start Time of Session", "End Time of Session",
    "Platform", "Total Cost"
]

canadian_locations = [
    "Toronto", "Vancouver", "Montreal", "Calgary", "Ottawa",
    "Edmonton", "Winnipeg", "Quebec City", "Hamilton", "London"
]

advertising_channels = ["Social Media", "Search Engine", "Email Marketing"]
device_types = ["Mobile", "Desktop", "Tablet"]
operating_systems = ["iOS", "Android", "Windows"]
browsers = ["Chrome", "Safari", "Firefox"]
platforms = ["Facebook", "Google", "YouTube"]

month_to_season = {
    "december": "winter", "january": "winter", "february": "winter",
    "march": "spring", "april": "spring", "may": "spring",
    "june": "summer", "july": "summer", "august": "summer",
    "september": "fall", "october": "fall", "november": "fall"
}


# ## Step 3: Generate Data




def generate_random_date(start_date, end_date):
    return start_date + timedelta(days=random.randint(0, (end_date - start_date).days))

def generate_random_time(date):
    return datetime(date.year, date.month, date.day, random.randint(0, 23), random.randint(0, 59), random.randint(0, 59))

def generate_advertising_data(num_rows):
    data = []
    start_date = datetime(2023, 1, 1)
    end_date = start_date + timedelta(days=365)

    for _ in range(num_rows):
        date = generate_random_date(start_date, end_date)
        month = date.strftime("%B").lower()
        season = month_to_season.get(month, "unknown")
        campaign_name = f"{season}_campaign"

        total_unique_users = random.randint(500, 2000)
        total_visitors_completed = random.randint(400, total_unique_users)
        impressions = random.randint(1000, 5000)
        number_of_clicks = random.randint(50, impressions)
        number_of_conversions = random.randint(5, number_of_clicks)
        advertising_channel = random.choice(advertising_channels)
        device_type = random.choice(device_types)
        os = random.choice(operating_systems)
        browser = random.choice(browsers)
        geographic_location = random.choice(canadian_locations)
        start_time = generate_random_time(date)
        end_time = start_time + timedelta(hours=random.randint(1, 5))
        platform = random.choice(platforms)
        total_cost = random.randint(100, 1000)

        data.append([
            date.strftime("%Y-%m-%d"), campaign_name, total_unique_users,
            total_visitors_completed, impressions, number_of_clicks,
            number_of_conversions, advertising_channel, device_type,
            os, browser, geographic_location,
            start_time.strftime("%Y-%m-%d %H:%M:%S"),
            end_time.strftime("%Y-%m-%d %H:%M:%S"), platform, total_cost
        ])

    return data

# Usage example
num_rows = 10000
data = generate_advertising_data(num_rows)


# ## Step 4: Write Data to CSV File



try:
    with open(file_path, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(columns)  # Write column headers
        writer.writerows(data)    # Write data rows
    print(f"CSV file generated successfully at: {file_path}")
except Exception as e:
    print(f"Error occurred while writing CSV file: {e}")


